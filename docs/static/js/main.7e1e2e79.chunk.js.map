{"version":3,"sources":["randomise-teams.js","TeamRandomiser.js","TeamRandomiserCard.js","index.js"],"names":["randomiseMembers","members","amountOfTeams","teams","i","membersRandomOrder","array","swapArray","returnArray","swap","index1","index2","temp","forEach","item","index","max","swapIndex","length","Math","round","random","randomiseArray","team","randomMember","push","TeamRandomiser","props","state","errors","event","preventDefault","this","textArea","value","split","map","trim","randomiseTeams","setState","target","Number","previousErrors","pop","TeamRenderer","otherProps","TeamItem","number","join","teamsElement","filter","key","sort","ErrorRenderer","className","onSubmit","onFormSubmit","onInput","onTeamCountChange","min","type","defaultValue","ref","element","placeholder","style","resize","React","Component","TeamRandomiserCard","width","height","ReactDOM","render","StrictMode","paddingTop","document","getElementById"],"mappings":"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","file":"static/js/main.7e1e2e79.chunk.js","sourcesContent":["/** @param {string[]}members\n * @param {number}amountOfTeams\n */\nexport default function randomiseMembers(members, amountOfTeams) {\n\n    /**\n     * @param {number} max\n     * @returns {number}\n     */\n    const randomInt = (max) => {\n        return Math.round(Math.random() * max);\n    }\n\n    /**\n     *\n     * @param {*[]} array\n     * @returns {*[]}\n     */\n    const randomiseArray = (array) => {\n        // Clone array\n        let returnArray = [...array];\n\n        /**\n         *\n         * @param {*[]} swapArray\n         * @returns {function(number, number)}\n         */\n        const createSwap = (swapArray) => (index1, index2) => {\n            const temp = swapArray[index1];\n            swapArray[index1] = swapArray[index2];\n            swapArray[index2] = temp;\n        }\n\n        const swap = createSwap(returnArray);\n\n        // Swap each item in the array with a random other item\n        array.forEach((item, index) => {\n            const swapIndex = randomInt(array.length - 1);\n            swap(index, swapIndex);\n        });\n        return returnArray;\n    }\n\n    // Create teams\n    const teams = [];\n    for (let i = 0; i < amountOfTeams; i++) {\n        teams[i] = []\n    }\n\n    // Shuffle members\n    const membersRandomOrder = randomiseArray(members);\n\n    // Round-robin random member to team\n    for (let i = 0; i < membersRandomOrder.length;) {\n        for (const team of teams) {\n            if (i === membersRandomOrder.length) {\n                break;\n            }\n\n            const randomMember = membersRandomOrder[i];\n            team.push(randomMember);\n            i++;\n        }\n    }\n\n    return teams;\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport randomiseTeams from \"./randomise-teams\";\nimport PropTypes from \"prop-types\"\n\nclass TeamRandomiser extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            members: [],\n            errors: [],\n            amountOfTeams: 2\n        }\n    }\n\n    /**\n     *\n     * @param {Event}event\n     */\n    onFormSubmit(event) {\n        event.preventDefault()\n        const {amountOfTeams} = this.state;\n        const members = this.textArea.value.split(\",\").map(item => item.trim());\n\n        if (!this.textArea.value) {\n            this.setState({\n                members: [],\n                teams: [],\n                errors: [\"Must enter team members\"]\n            })\n            return;\n        }\n\n        const teams = randomiseTeams(members, amountOfTeams);\n\n        this.setState({teams: teams, members: members})\n    }\n\n    /**\n     *\n     * @param {InputEvent<HTMLInputElement>} event\n     */\n    onTeamCountChange(event) {\n        event.preventDefault()\n\n        if (event.target.value) {\n            this.setState({amountOfTeams: Number(event.target.value)})\n        }\n    }\n\n    render() {\n        const {teams = [], errors: previousErrors = [], amountOfTeams} = this.state;\n\n        // Consume errors\n        const errors = [];\n        while (previousErrors.length > 0) {\n            errors.push(previousErrors.pop())\n        }\n\n        const TeamRenderer = ({teams, ...otherProps}) => {\n            const TeamItem = ({members, number}) => <div>Team {number}: {members.join(\", \")}</div>;\n            const teamsElement = teams.filter(team => team.length > 0).map((team, index) => (\n                <TeamItem key={index} members={team.sort()} number={index + 1}/>))\n\n            return <div {...otherProps}>\n                {teamsElement}\n            </div>\n        }\n\n        /**\n         *\n         * @param {string[]}errors\n         * @param {string} className\n         * @param {any} otherProps\n         * @constructor\n         */\n        const ErrorRenderer = ({errors, className = \"\", ...otherProps}) => {\n            return <span className={\"text-danger \" + className} {...otherProps}>{errors.join(\", \")}</span>\n        }\n\n        const {className = \"\", ...otherProps} = this.props;\n\n        return (\n            <form className={className} onSubmit={(event) => this.onFormSubmit(event)} {...otherProps}>\n                <div className=\"d-flex justify-content-between mb-2\">\n                    <h6 className=\"mb-0 align-self-center\">Number of teams</h6>\n                    <input\n                        onInput={event => this.onTeamCountChange(event)}\n                        className=\"w-25 form-control\"\n                        min={1}\n                        type=\"number\"\n                        defaultValue={amountOfTeams}\n                    />\n                </div>\n\n                <div>\n                    <h6>Team members:</h6>\n                    <textarea\n                        ref={(element) => (this.textArea = element)}\n                        className=\"form-control d-block mb-2\"\n                        placeholder=\"John Smith, Jane Smith\"\n                        style={{resize: \"none\"}}\n                    />\n                </div>\n                <input type=\"submit\" className=\"btn btn-success\" value=\"Randomise!\"/>\n\n                {errors.length > 0 ? <ErrorRenderer errors={errors} className=\"my-2 d-block\"/> : null}\n                {teams.length > 0 ? (<TeamRenderer teams={teams} className=\"mt-2 mb-1\"/>) : null}\n            </form>\n        );\n    }\n}\n\nTeamRandomiser.propTypes = {\n    className: PropTypes.string\n};\n\nexport default TeamRandomiser;","import React, {Component} from 'react';\nimport TeamRandomiser from \"./TeamRandomiser\";\nimport PropTypes from \"prop-types\";\n\nclass TeamRandomiserCard extends Component {\n    render() {\n        const {style = {width: 400, height: \"auto\"}, className = \"\", ...otherProps} = this.props;\n\n        return (\n            <div className={\"card \" + className} style={style} {...otherProps}>\n                <h4 className=\"card-header\">Team Randomiser</h4>\n\n                <TeamRandomiser className=\"p-2\"/>\n            </div>\n        );\n    }\n}\n\nTeamRandomiserCard.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object\n};\n\nexport default TeamRandomiserCard;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TeamRandomiserCard from \"./TeamRandomiserCard\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <div className=\"bg-dark\" style={{height:\"100vh\", paddingTop:\"20%\"}}>\n            <TeamRandomiserCard className=\"mx-auto align-middle\" />\n        </div>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}